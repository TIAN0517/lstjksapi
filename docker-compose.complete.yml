version: '3.8'

services:
  # PostgreSQL 資料庫
  postgres:
    image: postgres:15-alpine
    container_name: bossjy-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-bossjy}
      POSTGRES_USER: ${POSTGRES_USER:-bossjy}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-CHANGE_ME}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./deploy/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./backups:/backups
    ports:
      - "15432:5432"  # 外部訪問端口
    networks:
      - bossjy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bossjy} -d ${POSTGRES_DB:-bossjy}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis 快取
  redis:
    image: redis:7-alpine
    container_name: bossjy-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-CHANGE_ME} --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "16379:6379"  # 外部訪問端口
    networks:
      - bossjy-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Go API 服務 (Filter System)
  go-api:
    build:
      context: ./services/go-api
      dockerfile: Dockerfile
    container_name: bossjy-go-api
    restart: unless-stopped
    environment:
      - CONFIG_PATH=/app/configs/config.yaml
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET_KEY}
    volumes:
      - ./services/go-api/configs:/app/configs
      - ./logs/go-api:/app/logs
    ports:
      - "8080:8080"  # Go API 獨立端口 - 對外暴露
    networks:
      - bossjy-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # FastAPI 服務 (整合電話驗證)
  fastapi:
    build:
      context: ./services/fastapi
      dockerfile: Dockerfile
    container_name: bossjy-fastapi
    restart: unless-stopped
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - GEMINI_API_KEYS=${GEMINI_API_KEYS}
      - GOOGLE_PLACES_API_KEY=${GOOGLE_PLACES_API_KEY}
      - USDT_TRC20_ADDRESS=${USDT_TRC20_ADDRESS}
      - TZ=${TZ:-Asia/Taipei}
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
    volumes:
      - ./logs/fastapi:/app/logs
      - uploads_data:/app/data/uploads
      - processed_data:/app/data/processed
      - exports_data:/app/data/exports
      - ./services/fastapi/phone_db:/app/phone_db
    ports:
      - "18001:8000"  # FastAPI 主API服務 - 統一API端口
    networks:
      - bossjy-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Vue 前端
  vue-frontend:
    build:
      context: ./services/vue-frontend
      dockerfile: Dockerfile
    container_name: bossjy-vue-frontend
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Asia/Taipei}
    ports:
      - "3000:80"  # Vue 前端端口 - 對外暴露
    networks:
      - bossjy-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Telegram Bots
  bots:
    build:
      context: ./services/bots
      dockerfile: Dockerfile
    container_name: bossjy-bots
    restart: unless-stopped
    environment:
      - BOT1_TOKEN=${BOT1_TOKEN}
      - BOT2_TOKEN=${BOT2_TOKEN}
      - BOT3_TOKEN=${BOT3_TOKEN}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - TZ=${TZ:-Asia/Taipei}
    volumes:
      - ./logs/bots:/app/logs
      - bot_data:/app/data
    ports:
      - "9001:9001"  # Bot 服務端口，內部使用
    networks:
      - bossjy-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python3", "-c", "import requests; requests.get('http://localhost:9001/status', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx 反向代理 (整合SSL證書)
  nginx:
    image: nginx:alpine
    container_name: bossjy-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/nginx/conf.d:/etc/nginx/conf.d:ro
      # 映射本地SSL證書到容器
      - C:/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
      - ./deploy/nginx/snippets:/etc/nginx/snippets:ro
    networks:
      - bossjy-network
    depends_on:
      - fastapi
      - go-api
      - vue-frontend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Prometheus 監控
  prometheus:
    image: prom/prometheus:latest
    container_name: bossjy-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - bossjy-network

  # Grafana 儀表板
  grafana:
    image: grafana/grafana:latest
    container_name: bossjy-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - bossjy-network
    depends_on:
      - prometheus

  # 自動備份服務
  backup:
    image: postgres:15-alpine
    container_name: bossjy-backup
    restart: unless-stopped
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD:-CHANGE_ME}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - bossjy-network
    depends_on:
      - postgres
    command: >
      sh -c "
        chmod +x /backup.sh &&
        while true; do
          sleep 86400 &&
          /backup.sh
        done
      "

  # 日誌聚合 (ELK Stack)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: bossjy-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - bossjy-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: bossjy-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./logs:/logs:ro
    networks:
      - bossjy-network
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: bossjy-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - bossjy-network
    depends_on:
      - elasticsearch

volumes:
  pg_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  uploads_data:
    driver: local
  processed_data:
    driver: local
  exports_data:
    driver: local
  bot_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  bossjy-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16